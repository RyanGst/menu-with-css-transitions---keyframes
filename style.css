@import url('https://fonts.googleapis.com/css2?family=Amatic+SC&family=Roboto:wght@100&display=swap');

body {
    margin: 0;
    padding: 0;
    color: #ffffff;
    font-family: 'Amatic SC', sans-serif;
}

.wrapper {
    height: 100vh;
    width: 100vw;
    background: linear-gradient(-45deg, #5e0878, #085078, #4ca59b, #1fa194);
    /* linear-gradient deixa colocar várias cores que se misturam, formando um degradê */

    background-size: 400% 400%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    /*animation: name duration timing-function delay iteration-count direction fill-mode;

    name = nome da animação, duration = tempo total da animação, timing-function = tempo da curva, tempo que 
    ocorrer as curvas de animação, delay = tempo antes de começar, iteration-count = qnts vezes vai repetir,
    direction = onde vai ocorrer, fill-mode = estilo antes e depois da execução da animação.
    */

    animation: backgroundTransition 8s ease-in-out infinite;
    /*lembrando: ease-in-out: transição com início e final da animação lentos.*/
}

h1 {
    text-transform: uppercase;
    letter-spacing: 4px;
}

h2 {
    text-transform: uppercase;
    letter-spacing: 4px;
}

.social-media {
    margin-top: 1rem;
    display: flex;
}

a {
    text-decoration: none;
    /*para tirar o sublinhado do link*/
    color: #ffffff;
    font-size: 24px;
    padding: 1rem 4rem;
    /*vertical e depois horizontal*/
    border: 1px solid #ffffff;
    min-width: 4rem;
    /*como o tamanho das palavras era diferente, apliquei uma largura mínima para ficar mais
    harmônico, ficando os 2 com o mesmo tamanho inicial(linkedin e o github)*/
    display: flex;
    justify-content: center;
    align-items: center;
    transition: 0.5s cubic-bezier(0.55, 0.025, 0.675, 0.97);
    /*cubic-bezier define as curvas da animação "a mão" o quanto você quer que ela se mova no ínico, meio, final
    da animação. Diferente dos valores de ease-in, ease-out, linear que não podem ser customizados
    por já terem valores pré-definidos, o cubic-bezier você controla*/
}

a:hover {
    color: #085078;
    background-color: #ffffff;
}

@keyframes backgroundTransition {

    /*fases da animação*/
    0% {
        background-position: 0% 80%;
    }

    50%

    /*meio da animação*/
        {
        background-position: 80% 100%;
    }

    100%

    /*ao final da animação, ou quando acabar o tempo dela*/
        {
        background-position: 0% 90%;
        /*lembrando que a position é onde a nossa background vai ficar dentro
        do elemento container(elemento pai)*/
    }
}